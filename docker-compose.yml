
version: '3.8'

services:
  mongo1:
    container_name: mongo1
    image: mongo:7.0.3
    volumes:
      - ./scripts/:/scripts/   
      
    networks:
      - mongo-network
    ports:
      - 27017:27017
    depends_on:
      - mongo2
      - mongo3
    links:
      - mongo2
      - mongo3
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "db-replica-set" ]

  mongo2:
    container_name: mongo2
    image: mongo:7.0.3
    networks:
      - mongo-network
    ports:
      - 27018:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "db-replica-set" ]

  mongo3:
    container_name: mongo3
    image: mongo:7.0.3
    networks:
      - mongo-network
    ports:
      - 27019:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "db-replica-set" ]

  jupyter_service:
    container_name: jupyter
    build: ./jupyter
    user: root
    networks:
      - mongo-network
    #entrypoint: "/jupyter/docker-entrypoint.sh"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    ports:
      - 8085:8085   
    volumes:
      - ./jupyter/docker-entrypoint.sh:/jupyter/docker-entrypoint.sh
      - ./jupyter/pyMongoArrow.ipynb:/home/src/pyMongoArrow.ipynb
    command: jupyter notebook --ip 0.0.0.0 --port 8085 --allow-root

  api:
    build:
      context: ./fastapi
      dockerfile: Dockerfile  
    image: app-fastapi-mongodb:1
    ports:
      - "8000:8000"   
    container_name:  fast-api-fia 
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    volumes:
      - ./fastapi:/home/app/api   
    networks:
      - mongo-network
    stdin_open: true
    tty: true 

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
     - "2181:2181"
    container_name: zookeeper
    networks:
      mongo-network:

  
  kafka-broker:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9991:9991"

    container_name: kafka-broker
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'    
    networks:
      mongo-network:

  connect:
        image: kafka-connet-debezium:3.0.7.Final
        container_name: kafkaConect
        ports:
        - 8083:8083
        depends_on:      
         - kafka-broker      
        environment:
        - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
        - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka-broker:29092
        - |
            KAFKA_CONNECT_CONFIGURATION=
            key.converter=org.apache.kafka.connect.json.JsonConverter
            value.converter=org.apache.kafka.connect.json.JsonConverter
            key.converter.schemas.enable=false
            value.converter.schemas.enable=false
            group.id=connect
            offset.storage.topic=connect-offsets
            offset.storage.replication.factor=1
            config.storage.topic=connect-configs
            config.storage.replication.factor=1
            status.storage.topic=connect-status
            status.storage.replication.factor=1  
            CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'  
            producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor         
        command: /opt/kafka/kafka_connect_run.sh
        networks:
          mongo-network:

networks:
  mongo-network:
    driver: bridge
